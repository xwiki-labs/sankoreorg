<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>CreateResources</web>
  <name>UniboardUpload</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>CreateResources.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1352722708000</creationDate>
  <date>1352722708000</date>
  <contentUpdateDate>1352722708000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}
import javax.servlet.http.Cookie;
import com.xpn.xwiki.user.impl.xwiki.*;
import org.apache.commons.lang.StringUtils;
import org.apache.velocity.VelocityContext;

debugMessage = "";

def addDebug(message) {
  debugMessage += message + "\n";
}

def String stackTraceToString(Exception ex) {
  StringWriter sw = new StringWriter();
  PrintWriter pw = new PrintWriter(sw);
  ex.printStackTrace(pw);
  return sw.toString();
}

try {

def authorization = request.getHeader("Authorization");
def dauthorization = (authorization==null) ? null : MyBasicAuthenticator.decodeBasicAuthorizationString(authorization);

if (dauthorization!=null) {
   addDebug("Authorization present: ${dauthorization}")
   def dcred = dauthorization.split(":");
   def username = dcred[0];
   def password = dcred[1];
   // setting the authorization cookie
   def persistent = new MyPersistentLoginManager();
   if (xwiki.getXWiki().Param("xwiki.authentication.cookieprefix") != null) {
       persistent.setCookiePrefix(xwiki.getXWiki().Param("xwiki.authentication.cookieprefix"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.cookiepath") != null) {
       persistent.setCookiePath(xwiki.getXWiki().Param("xwiki.authentication.cookiepath"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.cookiedomains") != null) {
       String[] cdomains = StringUtils.split(xwiki.getXWiki().Param("xwiki.authentication.cookiedomains"), ",");
       persistent.setCookieDomains(cdomains);
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.cookielife") != null) {
       persistent.setCookieLife(xwiki.getXWiki().Param("xwiki.authentication.cookielife"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.protection") != null) {
       persistent.setProtection(xwiki.getXWiki().Param("xwiki.authentication.protection"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.useip") != null) {
       persistent.setUseIP(xwiki.getXWiki().Param("xwiki.authentication.useip"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.encryptionalgorithm") != null) {
       persistent.setEncryptionAlgorithm(xwiki.getXWiki().Param("xwiki.authentication.encryptionalgorithm"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.encryptionmode") != null) {
       persistent.setEncryptionMode(xwiki.getXWiki().Param("xwiki.authentication.encryptionmode"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.encryptionpadding") != null) {
       persistent.setEncryptionPadding(xwiki.getXWiki().Param("xwiki.authentication.encryptionpadding"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.validationKey") != null) {
       persistent.setValidationKey(xwiki.getXWiki().Param("xwiki.authentication.validationKey"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.encryptionKey") != null) {
       persistent.setEncryptionKey(xwiki.getXWiki().Param("xwiki.authentication.encryptionKey"));
   }

   persistent.rememberLogin(request.request, response.response, username, password);
}

addDebug("=== Cookie ===")
def cookie = request.getCookie("username")
if (cookie!=null) {
   addDebug("Cookie username is present: ${cookie.value}")
}
addDebug("""
=== User ===

${xcontext.user}
""")

addDebug("=== Request parameters ===")
for(param in request.getParameterNames()) {
  addDebug(param + "=" + request.getParameter(param))
}

if(xcontext.user != 'XWiki.XWikiGuest') {
  
  def fupl= xwiki.get("fileupload");
  def myfiles = fupl.getFileItems();
  def filename = fupl.getFileName('file')
  if(myfiles != null &amp;&amp; myfiles.size() &gt; 0 &amp;&amp; filename != null) {
    addDebug("File submited")
    addDebug(myfiles)
    addDebug("File: " + filename)
    def filedata = fupl.getFileItemData('file')
    if(xcontext.user != 'XWiki.XWikiGuest') {
      def tempAsset = xwiki.curriki.createAsset("");
      if(tempAsset != null) {
        InputStream ubz = new ByteArrayInputStream(filedata);
        tempAsset.addAttachment(ubz, filename);
        tempAsset.processAttachment();    
        addDebug("File uploaded")
        def title = request.get("title")
        addDebug("title: " + title)
        if(title != null &amp;&amp; !title.isEmpty()) {
          tempAsset.setTitle(title)    
        }
        def description = request.get("description")
        addDebug("description : " + description)
        if(description != null &amp;&amp; !description.isEmpty()) {
          def tempAssetObj = tempAsset.getObject('CurrikiCode.AssetClass')
          tempAssetObj.set('description', description)
        }
        //if((title != null &amp;&amp; !title.isEmpty()) || (description != null &amp;&amp; !description.isEmpty())) {
        tempAsset.save()
        //}
        def redirdoc = xwiki.getDocument("Main.RessourceSankore")
        def vcontext = new VelocityContext()
        vcontext.put('user', xwiki.getUserName(xcontext.user, false))
        vcontext.put('url', redirdoc.getExternalURL("view", 'asset=' + tempAsset.fullName))        
        vcontext.put('asset', tempAsset.getDisplayTitle())
        xwiki.mailsender.sendMessageFromTemplate(xwiki.getXWikiPreference("admin_email"), xwiki.getUser(xcontext.user).getEmail(), null, null, 'en', 'CreateResources.MailTemplateUniboardUploaded', vcontext)
        //def params = new HashMap&lt;String, Object&gt;()
        //params.put("userName", xwiki.getUserName(xcontext.user, false))
        //params.put("assetURL", redirdoc.getExternalURL("view", "asset=" + tempAsset.fullName))
        //services.mailsender.sendMessageFromTemplate("CreateResources.MailTemplateUniboardUploaded", xwiki.getXWikiPreference("admin_email"), xwiki.getUser(xcontext.user).getEmail(), params)
        Cookie statusCookie = new Cookie("assetStatus", 'UPLOADED')
        response.addCookie(statusCookie)
        println "UPLOADED"
        println debugMessage
        if(request.xpage != "plain") {
          response.sendRedirect(xwiki.getURL('Main.RessourceSankore', 'view', 'asset=' + tempAsset.fullName))
        }
      } else {
        Cookie statusCookie = new Cookie("assetStatus", 'FAIL')
        response.addCookie(statusCookie)
        addDebug("Asset creation failed")
        System.out.println("FILEUPLOAD FAIL Asset")
        System.out.println(debugMessage) 
        println "FAIL Asset creation failed"
        println debugMessage
      }
    } 
  } else {
    Cookie statusCookie = new Cookie("assetStatus", 'FAIL')
    response.addCookie(statusCookie)
    addDebug("Missing file")
    System.out.println("FILEUPLOAD FAIL Missing File")
    System.out.println(debugMessage) 
    println "FAIL Missing file"
    println debugMessage
  }
}
} catch(Exception e) {
  Cookie statusCookie = new Cookie("assetStatus", 'FAIL')
  response.addCookie(statusCookie)
  addDebug("Exception " + e.getMessage())
  addDebug(stackTraceToString(e))
  System.out.println("FILEUPLOAD FAIL Exception " + e.getMessage())
  System.out.println(debugMessage) 
  println "FAIL Exception " + e.getMessage()
  println debugMessage
}
{{/groovy}}
{{velocity}}
{{html clean="false"}}
&lt;form action="/xwiki/bin/view/CreateResources/UniboardUpload" enctype="multipart/form-data" method="post"&gt;
&lt;table border="0"&gt;
&lt;tr&gt;
  &lt;td&gt;File:&lt;/td&gt;&lt;td&gt;&lt;input type="file" name="file" /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
  &lt;td&gt;Title:&lt;/td&gt;&lt;td&gt;&lt;input type="text" name="title" /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
  &lt;td&gt;Description:&lt;/td&gt;&lt;td&gt;&lt;textarea name="description"&gt;&lt;/textarea&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
  &lt;td colspan="2" align="center"&gt;&lt;input type="submit" name="submit" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/form&gt;
{{/html}}
{{/velocity}}</content>
</xwikidoc>
