<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>ReviewSystem</web>
  <name>ReviewsMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>ReviewSystem.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1321456880000</creationDate>
  <date>1321456880000</date>
  <contentUpdateDate>1321456880000</contentUpdateDate>
  <version>1.1</version>
  <title>ReviewsMacros</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity output="false"}}
#if($hasGlobalAdmin)
#**
 * Macro to get the results of a livetable data call.
 * This page is called from live grids via Ajax with the argument xpage=plain. It returns a
 * set of results serialized in JSON.
 *#
#macro(gridresult $className $collist)
  #gridresultwithfilter($className $collist '' '' [])
#end
#**
 * Macro to get the results of a livetable data call.
 * This page is called from live grids via Ajax with the argument xpage=plain. It returns a
 * set of results serialized in JSON.
 *#
#macro(gridresultwithfilter $className $collist $filterfrom $filterwhere $filterParams)
  #if("$!{request.xpage}" == 'plain')
    $response.setContentType('application/json')
  #end
  #set($offset = $util.parseInt($request.get('offset')))
  ## offset starts from 0 in velocity and 1 in javascript
  #set($offset = $offset - 1)
  #if($offset &lt; 0)
    #set($offset = 0)
  #end
  #set($limit = $util.parseInt($request.get('limit')))
  #set($tablelist = $util.arrayList)
  ##
  ##
  ##
  ## Compute the query to use for retrieving data
  ##
  ## 
  ## additional columns, should *not* contain parameters, all added column names must be filtered
  #set($fromSql = '')
  ## parametrized filter part of the query
  #set($whereSql = '')
  ## list of parameters to use with $whereSql
  #set($whereParams = [])
  #set($class = $xwiki.getDocument($className).getxWikiClass())
  ##
  ## Exclude Blacklisted spaces ($blacklistedSpaces is set in xwikivars.vm)
  ##
  #if($blacklistedSpaces.size() &gt; 0)
    #set($whereSql = "${whereSql} and doc.space not in (")
    #foreach ($blacklistedSpace in $blacklistedSpaces)
      #if($velocityCount &gt; 1)#set ($whereSql = "${whereSql},")#end
      #set($whereSql = "${whereSql}?")
      #set($discard = $whereParams.add("$!{blacklistedSpace}"))
    #end
    #set($whereSql = "${whereSql})")
  #end
  ##
  ## Add the columns needed for the actual data
  ##
  #foreach($colname in $collist)
    #livetable_addColumnToQuery($colname)
  #end
  ##
  ## Tag filtering
  ##
  #if($request.tag)
    #set($fromSql = "${fromSql} , BaseObject as tobject, DBStringListProperty as tagprop")
    #set($whereSql = "${whereSql} and tobject.className='XWiki.TagClass' and tobject.name=doc.fullName and tobject.id=tagprop.id.id and tagprop.id.name='tags' and (")
    #foreach($tag in $request.getParameterValues('tag'))
      #set($tag = $util.decodeURI($tag))
      #if($velocityCount &gt; 1) #set($whereSql = "${whereSql} and ") #end
      #set($whereSql = "${whereSql} ? in elements(tagprop.list)")
      #set($discard = $whereParams.add("${tag}"))
    #end
    #set($whereSql = "${whereSql})")
  #end
  ##
  ##
  ## Order
  ##
  #set($order = "$!request.sort")
  #if($order != '')
    #set($orderDirection = "$!{request.get('dir').toLowerCase()}")
    #if("$!orderDirection" != '' &amp;&amp; "$!orderDirection" != 'asc')
      #set($orderDirection = 'desc')
    #end
    #if($order == 'description')
      #set($tableAlias = 'dtable')
    #else
      #set($tableAlias = $order)
    #end
    ## only safe version should be used in SQL queries
    #set($safe_tableAlias = "$!{tableAlias.replaceAll('[^a-zA-Z0-9_.]','')}")
    ##
    #if($order.startsWith('doc.'))
      #set($orderSql = " order by ${safe_tableAlias.replace('_','.')} ${orderDirection}")
    #elseif($tablelist.contains($tableAlias))
      #set ($multiselect = "$!{class.get($order).getProperty('multiSelect').getValue()}")
      #if ($multiselect != '1')
        #set ($orderSql = " order by ${safe_tableAlias}.value ${orderDirection}")
      #end
    #elseif($order == 'averagevote')
      #livetable_getTableName($order)
      #set($fromSql = "${fromSql}, BaseObject as objratings, ${tableName} ${safe_tableAlias}")
      #set($whereSql = "${whereSql} and doc.fullName=objratings.name and objratings.className='XWiki.AverageRatingsClass' and objratings.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.name = ?")
      #set($discard = $whereParams.add("${order}"))
      #set($orderSql = " order by ${safe_tableAlias}.value ${orderDirection}")
    #else
      #set($multiselect = $class.get($order).getProperty('multiSelect').getValue())
      #if("$multiselect" != '1')
        #livetable_getTableName($order)
        #set($fromSql = "${fromSql}, ${tableName} ${safe_tableAlias}")
        #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.name = ?")
        #set($discard = $whereParams.add("${order}"))
        #set($orderSql = " order by ${safe_tableAlias}.value ${orderDirection}")
      #end
    #end
  #end
  ##
  ##
  ## Compute the final queries
  ##
  #set($sqlParams = [])
  #set($tagsMatchingParams = [])
  #set($allMatchingParams = [])
  #if("$!className" != '')
    ## Class query
    #set($countSql = ", BaseObject as obj $!fromSql $!filterfrom where obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!whereSql $!filterwhere")
    #set($discard = $sqlParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    #set($discard = $sqlParams.addAll($whereParams))
    ##
    #set($tagsMatchingFiltersFrom = ", BaseObject as obj $!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!whereSql $!filterwhere")
    #set($discard = $tagsMatchingParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    #set($discard = $tagsMatchingParams.addAll($whereParams))
    ##
    #set($allMatchingTagsFrom = ", BaseObject as obj $!filterfrom")
    #set($allMatchingTagsWhere = "obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!filterwhere")
    #set($discard = $allMatchingParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    ##
    #if($filterParams)
      #set($discard = $sqlParams.addAll($filterParams))
      #set($discard = $tagsMatchingParams.addAll($filterParams))
      #set($discard = $allMatchingParams.addAll($filterParams))
    #end
  #else
    ## Document query
    #set($countSql = "$!fromSql $!filterfrom where 1=1 $!whereSql $!filterwhere")
    #set($discard = $sqlParams.addAll($whereParams))
    ##
    #set($tagsMatchingFiltersFrom = "$!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "1=1 $!whereSql $!filterwhere")
    #set($discard = $tagsMatchingParams.addAll($whereParams))
    ##
    #set($allMatchingTagsFrom = "$!filterfrom")
    #set($allMatchingTagsWhere = "1=1 $!filterwhere")
    ##
    #if($filterParams)
      #set($discard = $sqlParams.addAll($filterParams))
      #set($discard = $tagsMatchingParams.addAll($filterParams))
      #set($discard = $allMatchingParams.addAll($filterParams))
    #end
  #end
  ##
  ## TagCloud matching the current filters
  #set($tagsMatchingFilters = $xwiki.tag.getTagCountForQuery($tagsMatchingFiltersFrom, $tagsMatchingFiltersWhere, $tagsMatchingParams))
  ## TagCloud matching all the documents used by the livetable
  #set($allMatchingTags = $xwiki.tag.getTagCountForQuery($allMatchingTagsFrom, $allMatchingTagsWhere, $allMatchingParams))
  #set($sql = "$countSql $!{orderSql}")
  #set($items = $xwiki.searchDocuments($sql, $limit, $offset, $sqlParams))
  #set($totalItems = $xwiki.countDocuments($countSql, $sqlParams))
  #set($returnedItems = $items.size())
  ##
  ##
  ## ==============================================
  ## json starts
  ## ==============================================
{
  #if("$!request.sql" == '1')
    sql: $sql,
    countsql: $countSql,
    params: $sqlParams
    items: $items
  #end
  "totalrows": $totalItems,
  "matchingtags": {
  #foreach($tag in $tagsMatchingFilters.keySet())
    #if($velocityCount &gt; 1) , #end
    "$escapetool.javascript($tag)": {}
  #end
  },
  "tags" : [
  #foreach($tag in $allMatchingTags.keySet())
    #if($velocityCount &gt; 1) , #end
    {"tag": "$escapetool.javascript($tag)", "count": $allMatchingTags.get($tag)}
  #end
  ],
  "returnedrows": #if($returnedItems &lt; $limit) $returnedItems #else $limit #end,
  "offset": $mathtool.add($offset, 1),
  "reqNo": $util.parseInt($request.reqNo),
  "rows": [
    #foreach($item in $items)
     #set($viewable = $xwiki.hasAccessLevel('view', $context.user, "${context.database}:${item}"))
     #if($velocityCount &gt; 1) , #end
     {
      "doc_viewable" : $viewable,
      #if(!$viewable)
        "doc_fullname" : "$escapetool.javascript(${context.database}):$escapetool.javascript(${item})"
      #else
        #set($itemDoc = $xwiki.getDocument($item))
        #set($fullname = "${itemDoc.wiki}:${itemDoc.space}.${itemDoc.name}")
        #set($discard = $itemDoc.use($className))
        #set($itemUrl = $xwiki.getURL($item))
        #set($spaceUrl = $xwiki.getURL("${itemDoc.wiki}:${itemDoc.space}.WebHome"))
        #if($xwiki.isVirtualMode())
          #set($wiki = $itemDoc.wiki)
          #set($wikiUrl = $xwiki.getURL("${itemDoc.wiki}:Main.WebHome"))
        #end
        #set($editUrl = $itemDoc.getURL($itemDoc.defaultEditMode))
        #set($copyUrl = $itemDoc.getURL('view', 'xpage=copy'))
        #set($deleteUrl = $itemDoc.getURL('delete'))
        #set($viewURL = $itemDoc.getURL('view'))
        #set($renameUrl = $itemDoc.getURL('view', 'xpage=rename&amp;step=1'))
        #set($rightsUrl = $itemDoc.getURL('edit', 'editor=rights'))
        #set($reviewURL = $xwiki.getURL('ReviewSystem.Review', 'view', "page=${itemDoc.fullName}"))
        "doc_name" : "$escapetool.javascript($itemDoc.name)",
        "doc_fullname" : "$escapetool.javascript($fullname)",
        "doc_space" : "$escapetool.javascript(${itemDoc.space})",
        "doc_url" : "$escapetool.javascript(${itemUrl})",
        "doc_space_url" : "$escapetool.javascript(${spaceUrl})",
        #if($xwiki.isVirtualMode())
          "doc_wiki" : "$escapetool.javascript($wiki)",
          "doc_wiki_url" : "$escapetool.javascript($wikiUrl)",
        #end
        "doc_hasadmin"  : $xwiki.hasAdminRights(),
        "doc_hasedit" : $xwiki.hasAccessLevel('edit', $context.user, $fullname),
        "doc_hasdelete" : $xwiki.hasAccessLevel('delete', $context.user, $fullname),
        "doc_edit_url" : "$escapetool.javascript($editUrl)",
        "doc_copy_url"   : "$escapetool.javascript($copyUrl)",
        "doc_view_url" : "$escapetool.javascript($viewURL)",
        "doc_delete_url" : "$escapetool.javascript($deleteUrl)",
        "doc_rename_url" : "$escapetool.javascript($renameUrl)",
        "doc_rights_url" : "$escapetool.javascript($rightsUrl)",
        "doc_review_url" : "$escapetool.javascript($reviewURL)",
        "doc_author_url" : "$escapetool.javascript($xwiki.getURL($itemDoc.author))",
        "doc_date" : "$escapetool.javascript(${xwiki.formatDate($itemDoc.date)})",
        "doc_title" : "$escapetool.javascript($escapetool.xml(${itemDoc.plainTitle}))",
        "doc_author" : "$escapetool.javascript(${xwiki.getLocalUserName($itemDoc.author, false)})",
        "doc_creationDate" : "$escapetool.javascript(${xwiki.formatDate($itemDoc.creationDate)})",
        "doc_creator" : "$escapetool.javascript(${xwiki.getLocalUserName($itemDoc.creator, false)})"
        #foreach($colname in $collist)
          #if($colname.startsWith('doc.'))
          #elseif($colname == '_action') ,
            #set($text = $msg.get("${request.transprefix}actiontext"))
           "$escapetool.javascript(${colname})" : "$escapetool.javascript(${text})"
          #elseif($colname == '_attachments') ,
            #livetable_getAttachmentsList($itemDoc)
            "$escapetool.javascript(${colname})" : "$escapetool.javascript(${attachlist})"
          #elseif($colname == '_avatar') ,
            #livetable_getAvatar($itemDoc)
            "$escapetool.javascript(${colname})" : "$escapetool.javascript(${avatar})"
          #elseif($colname == '_images') ,
            #livetable_getImagesList($itemDoc)
            "$escapetool.javascript(${colname})" : "$escapetool.javascript(${imagesList})"
          #else ,
            #set($propClassName = "$!{request.get(${colname.concat('_class')})}")
            #if($propClassName != '')
              #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
              #set($discard = $itemDoc.use($propClassName))
            #else
              #set($propClass = $class)
            #end
            ## Retrieve the property type as it might be usefull
            #set($propType = '')
            #if($listtool.contains($propClass.getPropertyNames(), $colname))
              #set($propType = "$!{propClass.get($colname).type}")
            #end
            #set($fieldValue = "$!itemDoc.getValue($colname)")
            #set($fieldDisplayValue = "$!itemDoc.display($colname, 'view')")
            #if($fieldDisplayValue == '')
              #set($fieldDisplayValue = $msg.get("${request.transprefix}emptyvalue"))
            #end
            #set($fieldUrl = '')
            ## only retrieve an URL for a DBListClass item
            #if($propType == 'DBListClass')
              #set($fieldUrl = $xwiki.getDocument($fieldValue).getURL())
              #if($fieldUrl == $xwiki.getURL('Main.WebHome'))
                #set($fieldUrl = '')
              #end
            #end
            "$escapetool.javascript(${colname})" : "$escapetool.javascript($fieldDisplayValue.replaceFirst($regextool.quote('{{html clean="false" wiki="false"}}'), '').replaceAll("$regextool.quote('{{/html}}')$", ''))",
            "$escapetool.javascript(${colname})_value" : "$escapetool.javascript(${fieldValue})",
            "$escapetool.javascript(${colname})_url" : "$escapetool.javascript(${fieldUrl})"
            ## reset to the default class
            #set($discard = $itemDoc.use($className))
          #end
        #end
      #end
     }
    #end
  ]}
## ==============================================
## json ended
## ==============================================
#end


#**
 * Get the name of the Property that should be used for a given livetable column.
 * NOTE the resulting $tableName is safe to use inside SQL queries
 *#
#macro(livetable_getTableName $colname)
  #set($propClassName = "$!request.get(${colname.concat('_class')})")
  #if($propClassName != '')
    #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
  #else
    #set($propClass = $class)
  #end
  #set($propType = '')
  #if($listtool.contains($propClass.getPropertyNames(), $colname))
    #set($propType = "$!{propClass.get($colname).type}")
  #end
  #if($propType == 'NumberClass')
    #set($numberType = $propClass.get($colname).getProperty('numberType').getValue())
    #if($numberType == 'integer')
      #set($tableName = 'IntegerProperty')
    #elseif($numberType == 'float')
      #set($tableName = 'FloatProperty')
    #elseif($numberType == 'double')
      #set($tableName = 'DoubleProperty')
    #else
      #set($tableName = 'LongProperty')
    #end
  #elseif($propType == 'BooleanClass')
    #set($tableName = 'IntegerProperty')
  #elseif($propType == 'DateClass')
    #set($tableName = 'DateProperty')
  #elseif($propType == 'TextAreaClass' || $propType == 'UsersClass' || $propType == 'GroupsClass')
    #set($tableName = 'LargeStringProperty')
  #elseif($propType == 'StaticListClass' || $propType == 'DBListClass' || $propType == 'DBTreeListClass')
    #set($multiSelect = $propClass.get($colname).getProperty('multiSelect').getValue())
    #set($relationalStorage = $propClass.get($colname).getProperty('relationalStorage').getValue())
    #if($multiSelect == 1)
      #if($relationalStorage == 1)
        #set($tableName = 'DBStringListProperty')
      #else
        #set($tableName = 'StringListProperty')
      #end
    #else
      #set($tableName = 'StringProperty')
    #end
  #else
    #set($tableName = 'StringProperty')
  #end
#end

#**
 * Old alias of the #livetable_getTableName macro.
 * @deprecated since 2.2.3, use {@link #livetable_getTableName}
 *#
#macro(grid_gettablename $colname)
  #livetable_getTableName($colname)
#end



#**
 * List attachments for a document, putting the result as HTML markup in the $attachlist variable.
 *#
#macro(livetable_getAttachmentsList $itemDoc)
  #set($attachlist = '')
  #foreach($attachment in $itemDoc.attachmentList)
    #set($attachmentUrl = $itemDoc.getAttachmentURL($attachment.filename))
    #set($attachlist = "${attachlist}&lt;a href='${attachmentUrl}'&gt;$attachment.filename&lt;/a&gt;&lt;br/&gt;")
  #end
#end

#**
 * Old alias of the #livetable_getAttachmentsList macro.
 * @deprecated since 2.2.3, use {@link #livetable_getAttachmentsList}
 *#
#macro(grid_attachlist $itemDoc)
  #livetable_getAttachmentsList($itemDoc)
#end



#**
 * List image attachments for a document, putting the result as HTML markup in the $imagesList variable.
 *#
#macro(livetable_getImagesList $itemDoc)
  #set($imagesList = '')
  #foreach ($attachment in $itemDoc.attachmentList)
    #if($attachment.isImage())
      #set($attachmentUrl = $itemDoc.getAttachmentURL($attachment.filename))
      #set($imagesList = "${imagesList}&lt;img src='${attachmentUrl}' alt='${attachment.filename}' width='50'/&gt;&lt;br/&gt;")
    #end
  #end
#end

#**
 * Old alias of the #livetable_getImagesList macro.
 * @deprecated since 2.2.3, use {@link #livetable_getImagesList}
 *#
#macro(grid_photolist $itemDoc)
  #livetable_getImagesList($itemDoc)
#end


#**
 * Generate the HTML code for a user avatar, with a fixed 50px width.
 *#
#macro(livetable_getAvatar $itemDoc)
  #set ($avatar = "#mediumUserAvatar($itemDoc.fullName)")
  #set ($avatar = $avatar.trim())
#end

#**
 * Old alias of the #livetable_getAvatar macro.
 * @deprecated since 2.2.3, use {@link #livetable_getAvatar}
 *#
#macro(grid_avatar $itemDoc)
  #livetable_getAvatar($itemDoc)
#end



#**
 * Macro to extend the query to select the properties for the livetable columns.
 * NOTE $colname is filtered (all characters but [a-zA-Z0-9_.] are removed) before use
 *#
#macro(livetable_addColumnToQuery $colname)
  #set($filterValue = "$!{request.get($colname)}")
  #if($colname == 'description')
    #set($tableAlias = 'dtable')
  #else
    #set($tableAlias = $colname)
  #end
  ## only safe versions should be used in SQL queries
  #set($safe_colname = "$!{colname.replaceAll('[^a-zA-Z0-9_.]','')}")
  #set($safe_tableAlias = "$!{tableAlias.replaceAll('[^a-zA-Z0-9_.]','')}")
  ##
  #set($propType = '')
  #set($propClassName = "$!request.get(${colname.concat('_class')})")
  #if($propClassName != '')
    #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
  #else
    #set($propClass = $class)
  #end
  #if($propClass &amp;&amp; $listtool.contains($propClass.getPropertyNames(), $colname))
    #set($propType = "$!{propClass.get($colname).type}")
  #end
  ##
  ## Filter values
  #if("$!filterValue" != '')
    #set($discard = $tablelist.add($tableAlias))
    #if($colname.startsWith('doc.'))
      #set($whereSql = "${whereSql} and upper(str(${safe_colname.replace('_','.')})) like upper(?)")
      #set($discard = $whereParams.add("%${filterValue}%"))
    #elseif($propType == 'NumberClass' || $propType == 'BooleanClass')
      #livetable_getTableName($colname)
      #set($fromSql = "${fromSql}, ${tableName} ${safe_tableAlias}")
      #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and ${safe_tableAlias}.value = ?")
      #set($discard = $whereParams.addAll(["${colname}", $util.parseInt(${filterValue})]))
    #elseif($propType == 'DateClass')
      #set($fromSql = "${fromSql}, DateProperty ${safe_tableAlias}")
      #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and upper(str(${safe_tableAlias}.value)) like upper(?)")
      #set($discard = $whereParams.addAll(["${colname}", "%${filterValue}%"]))
    #elseif($propType == 'TextAreaClass' || $propType == 'UsersClass' || $propType == 'GroupsClass')
      #set($fromSql = "${fromSql}, LargeStringProperty ${safe_tableAlias}")
      #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and upper(${safe_tableAlias}.value) like upper(?)")
      #set($discard = $whereParams.addAll(["${colname}", "%${filterValue}%"]))
    #elseif($propType == 'StaticListClass' || $propType == 'DBListClass' || $propType == 'DBTreeListClass')
      #set($multiSelect = $propClass.get($colname).getProperty('multiSelect').getValue())
      #set($relationalStorage = $propClass.get($colname).getProperty('relationalStorage').getValue())
      #if($multiSelect == 1)
        #if($relationalStorage == 1)
          #set($fromSql = "${fromSql}, DBStringListProperty ${safe_tableAlias}")
          #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and ? in elements(${safe_tableAlias}.list)")
          #set($discard = $whereParams.addAll(["${colname}", "${filterValue}"]))
        #else
          #set($fromSql = "${fromSql}, StringListProperty ${safe_tableAlias}")
          #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and concat('|', concat(upper(${safe_tableAlias}.textValue), '|')) like upper(?)")
          #set($discard = $whereParams.addAll(["${colname}", "%|${filterValue}|%"]))
        #end
      #else
        #set($fromSql = "${fromSql}, StringProperty ${safe_tableAlias}")
        #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and ${safe_tableAlias}.value = ?")
        #set($discard = $whereParams.addAll(["${colname}", "${filterValue}"]))
      #end
    #else
      #set($fromSql = "${fromSql}, StringProperty ${safe_tableAlias}")
      #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ? and upper(${safe_tableAlias}.value) like upper(?)")
      #set($discard = $whereParams.addAll(["${colname}", "%${filterValue}%"]))
    #end
  #end
#end

#**
 * Old alias of the #livetable_addColumnToQuery macro.
 * @deprecated since 2.2.3, use {@link #livetable_addColumnToQuery}
 *#
#macro(grid_addcolumn $colname)
  #livetable_addColumnToQuery($colname)
#end

#macro(livetable $divid $collist $colprops $options)
## Do not indent:
#if($xwiki.getCurrentContentSyntaxId() != "xwiki/1.0")


{{html}}
#else {pre} #end
  ##
  ## SX deps.
  ##
  #set($ok = $xwiki.jsfx.use('js/xwiki/table/livetable.js', true))
  #set($ok = $xwiki.ssfx.use('js/xwiki/table/livetable.css', true))
  ##
  ## Options / defaults
  ##
  #if("$!options.translationPrefix" != '') #set($transprefix = $options.translationPrefix) #else #set($transprefix = '') #end
  #if("$!options.selectedColumn" != '')  #set($selectedColumn = $options.selectedColumn) #end
  #if("$!options.defaultOrder" == 'desc') #set($defaultOrder = 'desc') #else #set($defaultOrder = 'asc') #end
  #if("$!options.rowCount" != '') #set($count = $options.rowCount) #else #set($count = 15) #end
  #if("$!options.maxPages" != '') #set($maxPages = $options.maxPages) #else #set($maxPages = 10) #end
  #if("$!options.selectedColumn" != '') #set($selectedColumn = $options.selectedColumn) #end
  #if("$!options.callback" != '') #set($callback = $options.callback) #end
  #if("$!options.tagCloud" == '' || $options.tagCloud == false) #set($tagcloud=false) #else #set($tagcloud = true) #end
  #if("$!options.javascriptName" != '') #set($jsName = $options.javascriptName) #else #set($jsName = 'livetable') #end
  #if("$!options.topFilters" != '') #set($topfilters = $options.topFilters) #end
  #if("$options.pageSize" == '' || $!options.pageSize == false) #set($hasPageSize=false) #else #set($hasPageSize = true) #end
  #if("$!options.pageSizeBounds" != '') #set($pageSizeBounds = $options.pageSizeBounds) #end
  #set($classname = "$!options.className")
  #set($extraparams = "$!options.extraParams")
  ##
  ## Columns informations
  ##
  #set($collist2 = '')
  #set($classparams = '')
  #foreach($colname in $collist)
    #if("$!selectedColumn" == '' &amp;&amp; !$colname.startsWith('_'))
      #set($selectedColumn = $colname)
    #end
    #if($colname != '_actions')
      #set($collist2 = "${collist2},${colname}")
      #set($propClassName = "$!{colprops.get($colname).get('class')}")
      #if($propClassName != '')
        #set($classparams = "${classparams}&amp;${colname}_class=${propClassName}")
      #end
    #end
  #end
  #set($collist2 = $collist2.substring(1))
  #if("$!options.url" != '')
    #set($dataurl = $options.url)
  #elseif("$!options.resultPage" != '')
    #set($dataurl = $xwiki.getURL($options.resultPage, 'get', "outputSyntax=plain&amp;transprefix=${transprefix}&amp;classname=$!{classname}&amp;collist=${collist2}&amp;$!{extraparams}${classparams}") )
  #else
    #set($dataurl = $xwiki.getURL('XWiki.LiveTableResults', 'get', "outputSyntax=plain&amp;transprefix=${transprefix}&amp;classname=$!{classname}&amp;collist=${collist2}$!{extraparams}${classparams}"))
  #end
  ##
  ## HTML Table
  ##
&lt;div class="xwiki-livetable-container"&gt;
  #if("$!topfilters" !='') #set($hasTopFilters = true) #else #set($hasTopFilters = false) #end
  #if($tagcloud || $hasTopFilters)
  &lt;div class="tipfilters"&gt;
  #end
  #if($hasTopFilters)
  &lt;div id="${divid}-topfilters" class="xwiki-livetable-topfilters-tip #if($tagcloud)splitted#end"&gt;
    &lt;div&gt;
      &lt;div class="xwiki-livetable-topfilters-container"&gt;
      $topfilters
      &lt;/div&gt;
      &lt;div class="tippointer"&gt;
        &lt;div&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  #end
  #if($tagcloud)
    #set($discard = $xwiki.ssx.use('XWiki.TagCloud'))
    &lt;div id="${divid}-tagcloud" class="xwiki-livetable-tagcloud-tip hidden #if($hasTopFilters)splitted#end"&gt;
      &lt;div&gt;
        &lt;div class="xwiki-livetable-tagcloud-container"&gt;
          &lt;h2&gt;$msg.get('xe.livetable.tags.help')
	        &lt;span&gt;$msg.get('xe.livetable.tags.help.cancel')&lt;/span&gt;
          &lt;/h2&gt;
          &lt;div class="xwiki-livetable-tagcloud"&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="tippointer"&gt;
          &lt;div&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  #end
  #if($tagcloud || $hasTopFilters)
  &lt;/div&gt;
  #end
  &lt;table id="${divid}" class="xwiki-livetable"#if("$!options.description" != '') summary="$options.description"#end&gt;
    &lt;tr&gt;
      &lt;td class="xwiki-livetable-pagination"&gt;
        &lt;span id="${divid}-limits" class="xwiki-livetable-limits"&gt;&lt;/span&gt;
  #if($hasPageSize)
        &lt;span id="${divid}-pagesize" class="xwiki-livetable-pagesize"&gt;
            &lt;span&gt;$msg.get('xe.livetable.pagesize.label')&lt;/span&gt;
            &lt;span class="xwiki-livetable-pagesize-content" &gt;&lt;/span&gt;
        &lt;/span&gt;
  #end
        &lt;span id="${divid}-ajax-loader" class="xwiki-livetable-loader hidden"&gt;
          &lt;img src="$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')" alt="$msg.get('xe.livetable.loading')" title="" /&gt;
        &lt;/span&gt;
        &lt;span class="controlPagination"&gt;
          &lt;a title="$msg.get('xe.pagination.page.prev.title')" class="prevPagination" href="#"&gt;&lt;span class="hidden"&gt;$msg.get('xe.pagination.page.prev.title')&lt;/span&gt;&lt;/a&gt;
          &lt;a title="$msg.get('xe.pagination.page.next.title')" class="nextPagination" href="#"&gt;&lt;span class="hidden"&gt;$msg.get('xe.pagination.page.next.title')&lt;/span&gt;&lt;/a&gt;
        &lt;/span&gt;
        &lt;span class="pagination"&gt;
          &lt;span class="xwiki-livetable-pagination-text"&gt;$msg.get("xe.pagination.page")&lt;/span&gt;
          &lt;span class="xwiki-livetable-pagination-content" &gt;&lt;/span&gt;
        &lt;/span&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class="xwiki-livetable-display-container"&gt;
        &lt;table class="xwiki-livetable-display"&gt;
          &lt;thead class="xwiki-livetable-display-header"&gt;
            &lt;tr&gt;
            #set($columnCount = 0)
            #foreach($colname in $collist)
              #set($colprop = $colprops.get($colname))
              #if(("$!colprop.filterable" == '' || $colprop.filterable != false) &amp;&amp; "$!colname" != '_actions')
                #set($isFilterable = true)
              #else
                #set($isFilterable = false)
              #end
              #if(("$!colprop.sortable" == '' || $colprop.sortable != false) &amp;&amp; "$!colname" != '_actions')
                #set($isSortable = true)
              #else
                #set($isSortable = false)
              #end
              ## Determine the name to be displayed in the column header. Strategy is as following :
              ## - If defined the displayName passed as a column option wins
              ## - If not, and if a i18n prefix has been passed, we use the localization tool with the prefix + the column name
              ## - Finally, we fall back on the column name
              #if("$!colprop.displayName" != '')
                #set($displayName = $colprop.displayName)
              #elseif($transprefix != '')
                #set($displayName = $msg.get("${transprefix}${colname}"))
              #else
                #set($displayName = $colname)
              #end
              &lt;th class="xwiki-livetable-display-header-text $!colprop.headerClass #if($!colprop.type=='hidden')hidden#end #if($isSortable)sortable #if($colname == $selectedColumn)selected $defaultOrder#else asc#end#end#if ($colname == '_avatar') avatar#end" scope="col"&gt;
                #if($isSortable)&lt;a rel="${colname}"&gt;#end
                #if($isFilterable &amp;&amp; ("$!colprop.type"=="text"||"$!colprop.type"=="number"))&lt;label for="xwiki-livetable-${divid}-filter-${velocityCount}"&gt;#end
                $displayName
                #if($isFilterable &amp;&amp; ("$!colprop.type"=="text"||"$!colprop.type"=="number"))&lt;/label&gt;#end
                #if($isSortable)&lt;/a&gt;#end
                #set($columnCount = $mathtool.add($columnCount, 1))
              &lt;/th&gt;
            #end
            &lt;/tr&gt;
            &lt;tr class="xwiki-livetable-display-filters"&gt;
            #foreach($colname in $collist)
              #set($colprop = $colprops.get($colname))
              #if(("$!colprop.filterable" == '' || $colprop.filterable != false) &amp;&amp; "$!colname" != '_actions')
                #set($isFilterable = true)
              #else
                #set($isFilterable = false)
              #end
              #if("$!colprop.type" == 'list' &amp;&amp; $isFilterable)
                &lt;td class="xwiki-livetable-display-header-filter"&gt;
                #if($colprop.get('class'))
                  #set($propClassName = $colprop.get('class'))
                #else
                  #set($propClassName = $classname)
                #end
                #set($class = $xwiki.getDocument($propClassName).getxWikiClass())
                #set($list = '')
                #set($list = $class.get($colname).getListValues())
                &lt;select id="xwiki-livetable-${divid}-filter-${velocityCount}" name='${colname}'&gt;&lt;option value=''&gt;$msg.get('xe.livetable.select.all')&lt;/option&gt;
                #set($map = $class.get($colname).getMapValues())
                #foreach($listitem in $list)
                  #set ($l10n_key = "${propClassName}_${colname}_${listitem}")
                  #set ($l10n_value = $msg.get($l10n_key))
                  #if ($l10n_value == $l10n_key)
                    #set ($l10n_value = $map.get($listitem).getValue())
                  #end
                  &lt;option value="$listitem"&gt;$l10n_value&lt;/option&gt;
                #end
                &lt;/select&gt;
                &lt;/td&gt;
              #elseif(("$!colprop.type" == 'text' || "$!colprop.type" == 'number') &amp;&amp; $isFilterable)
                &lt;td class="xwiki-livetable-display-header-filter"&gt;&lt;input id="xwiki-livetable-${divid}-filter-${velocityCount}" name="${colname}" type="text" #if("!$colprop.size" != '') size="${colprop.size}" title="$msg.get('xe.livetable.filters.title', [$msg.get("${transprefix}${colname}")])"#end /&gt;&lt;/td&gt;
              #elseif("$!colprop.type" == 'hidden')
              #elseif($colname != '_actions' || $hasAdmin)
              &lt;td class="xwiki-livetable-display-header-filter"&gt;&lt;/td&gt;
              #end
            #end
            &lt;/tr&gt;
            &lt;tr class="xwiki-livetable-initial-message"&gt;
              &lt;td colspan="${columnCount}"&gt;
                &lt;div class="warningmessage"&gt;$msg.get('xe.livetable.environmentCannotLoadTableMessage')&lt;/div&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody id="${divid}-display" class="xwiki-livetable-display-body"&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class="xwiki-livetable-pagination"&gt;
        &lt;span class="controlPagination"&gt;
          &lt;a title="$msg.get('xe.pagination.page.prev.title')" class="prevPagination" href="#"&gt;&lt;span class="hidden"&gt;$msg.get('xe.pagination.page.prev.title')&lt;/span&gt;&lt;/a&gt;
          &lt;a title="$msg.get('xe.pagination.page.next.title')" class="nextPagination" href="#"&gt;&lt;span class="hidden"&gt;$msg.get('xe.pagination.page.next.title')&lt;/span&gt;&lt;/a&gt;
        &lt;/span&gt;
        &lt;span class="pagination"&gt;
          &lt;span class="xwiki-livetable-pagination-text"&gt;$msg.get('xe.pagination.page')&lt;/span&gt;
          &lt;span class="xwiki-livetable-pagination-content" &gt;&lt;/span&gt;
        &lt;/span&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  &lt;div id="${divid}-inaccessible-docs" class="hidden"&gt;
    #info($msg.get('rightsmanager.documentrequireviewrights'))
  &lt;/div&gt;
  &lt;script type="text/javascript"&gt;
  //&lt;![CDATA[
(function() {
 var startup = function() {
  if (typeof XWiki !== "undefined" &amp;&amp; typeof XWiki.widgets !== "undefined" &amp;&amp; typeof XWiki.widgets.LiveTable !== "undefined") {
    // Make sure the Livetable widgets exists (It does not in the WYSIWYG for example).
  #if($callback)
    $jsName = new XWiki.widgets.LiveTable("$dataurl", "${divid}", $callback ,{
                         "maxPages":$maxPages
	                    ,"limit":$count
     #if($hasTopFilters),"filterNodes" : [$("${divid}").down(".xwiki-livetable-display-filters"), $('${divid}-topfilters')]#end
     #if($hasPageSize &amp;&amp; "$!pageSizeBounds" != ''),"pageSizeBounds" : $pageSizeBounds#end
	          });
  #else
    $jsName = new XWiki.widgets.LiveTable("$dataurl", "${divid}", #livetablecallback($divid $collist $colprops $transprefix), {
                         "maxPages":$maxPages
	                    ,"limit":$count
     #if($hasTopFilters),"filterNodes" : [$("${divid}").down(".xwiki-livetable-display-filters"), $('${divid}-topfilters')]#end
     #if($hasPageSize &amp;&amp; "$!pageSizeBounds" != ''),"pageSizeBounds" : $pageSizeBounds#end
	          });
  #end
  #if($!hasPageSize)
    document.observe("xwiki:livetable:${divid}:loadingEntries", function() { $('${divid}-pagesize').addClassName("hidden"); } );
    document.observe("xwiki:livetable:${divid}:loadingComplete", function() { $('${divid}-pagesize').removeClassName("hidden"); } );
  #end
  }
 }
 if ((typeof(XWiki) != 'undefined') &amp;&amp; (typeof(XWiki.widgets) != 'undefined') &amp;&amp; (typeof(XWiki.widgets.LiveTable) != 'undefined')) {
   startup();
 } else {
   document.observe('xwiki:dom:loading', startup);
 }
})();
   //]]&gt;
  &lt;/script&gt;
&lt;/div&gt; ## xwiki-livetable-container
  #if($xwiki.getCurrentContentSyntaxId() != "xwiki/1.0"){{/html}}

#else {/pre} #end
#end
#end
{{/velocity}}
</content>
</xwikidoc>
