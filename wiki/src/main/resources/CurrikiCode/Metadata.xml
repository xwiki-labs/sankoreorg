<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>CurrikiCode</web>
  <name>Metadata</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>CurrikiCode.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1330436718000</creationDate>
  <date>1419607086000</date>
  <contentUpdateDate>1419607086000</contentUpdateDate>
  <version>1.1</version>
  <title>Metadata</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}
import net.sf.json.JsonConfig;
import net.sf.json.JSONObject;
import com.xpn.xwiki.XWikiException;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.objects.PropertyInterface;
import com.xpn.xwiki.objects.classes.BaseClass;

import java.util.Map;

//String className = (String) request.getAttributes().get("className");
//String fieldName = (String) request.getAttributes().get("fieldName");

String className = "CurrikiCode.AssetClass";
String fieldName = "educational_level";

XWikiContext xwikiContext = xcontext.getContext();

JSONObject json = new JSONObject();

PropertyInterface field = null;

try {
    BaseClass xwikiClass = xwikiContext.getWiki().getDocument(className, xwikiContext).getxWikiClass();
    if (xwikiClass == null) {
        throw error(Status.CLIENT_ERROR_NOT_FOUND, "Class Not Found.");
    }
    field = xwikiClass.get(fieldName);
    if (field == null) {
        throw error(Status.CLIENT_ERROR_NOT_FOUND, "Class Field Not Found.");
    }
    String fieldType = field.getClass().getCanonicalName();    
    String shortFieldType = fieldType.replaceFirst("com.xpn.xwiki.objects.classes.", "");
    shortFieldType = shortFieldType.replaceFirst("Class", "");
    json.put("className", className);
    json.put("fieldName", fieldName);
    json.put("fieldType", fieldType);
    json.put("shortFieldType", shortFieldType);
    if (shortFieldType.equals("Boolean")) {
        // No extra info
    } else if (shortFieldType.equals("Date")) {
        // No extra info
    } else if (shortFieldType.equals("DBList")) {
        json.put("allowedValues", ((com.xpn.xwiki.objects.classes.DBListClass) field).getList(xwikiContext));
    } else if (shortFieldType.equals("DBTreeList")) {
        JsonConfig config = new JsonConfig();
        //config.setExcludes(new String[] {"value"});
        Map map = ((com.xpn.xwiki.objects.classes.DBTreeListClass) field).getTreeMap(xwikiContext);

        // The XML representation cannot have an empty name
        Object root = map.get("");
        if (root != null) {
            map.remove("");
            map.put("TREEROOTNODE", root);
        }               
                
        // TODO:  The XML representation cannot use &amp; in names

        json.accumulate("allowedValueMap", map, config);
    } else if (shortFieldType.equals("StaticList")) {
        json.put("allowedValues", ((com.xpn.xwiki.objects.classes.StaticListClass) field).getList(xwikiContext));
    } else if (shortFieldType.equals("String")) {
        // No extra info
    } else if (shortFieldType.equals("TextArea")) {
        // No extra info
    }
} catch (XWikiException e) {
    throw error(Status.CLIENT_ERROR_NOT_FOUND, "Class Information Not Found.");
}

print json.toString();

{{/groovy}}</content>
</xwikidoc>
