<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>Main</web>
  <name>RessourceSankore</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Main.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1351593464000</creationDate>
  <date>1351593464000</date>
  <contentUpdateDate>1351593464000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}
import javax.servlet.http.Cookie;
import com.xpn.xwiki.user.impl.xwiki.*;
import org.apache.commons.lang.StringUtils;
import org.curriki.xwiki.plugin.asset.Asset;
import com.xpn.xwiki.XWikiException;

def authorization = request.getHeader("Authorization");
def dauthorization = (authorization==null) ? null : MyBasicAuthenticator.decodeBasicAuthorizationString(authorization);

if (dauthorization!=null) {
   println "Authorization present: ${dauthorization}"
   def dcred = dauthorization.split(":");
   def username = dcred[0];
   def password = dcred[1];
   // setting the authorization cookie
   def persistent = new MyPersistentLoginManager();
   if (xwiki.getXWiki().Param("xwiki.authentication.cookieprefix") != null) {
       persistent.setCookiePrefix(xwiki.getXWiki().Param("xwiki.authentication.cookieprefix"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.cookiepath") != null) {
       persistent.setCookiePath(xwiki.getXWiki().Param("xwiki.authentication.cookiepath"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.cookiedomains") != null) {
       String[] cdomains = StringUtils.split(xwiki.getXWiki().Param("xwiki.authentication.cookiedomains"), ",");
       persistent.setCookieDomains(cdomains);
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.cookielife") != null) {
       persistent.setCookieLife(xwiki.getXWiki().Param("xwiki.authentication.cookielife"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.protection") != null) {
       persistent.setProtection(xwiki.getXWiki().Param("xwiki.authentication.protection"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.useip") != null) {
       persistent.setUseIP(xwiki.getXWiki().Param("xwiki.authentication.useip"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.encryptionalgorithm") != null) {
       persistent.setEncryptionAlgorithm(xwiki.getXWiki().Param("xwiki.authentication.encryptionalgorithm"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.encryptionmode") != null) {
       persistent.setEncryptionMode(xwiki.getXWiki().Param("xwiki.authentication.encryptionmode"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.encryptionpadding") != null) {
       persistent.setEncryptionPadding(xwiki.getXWiki().Param("xwiki.authentication.encryptionpadding"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.validationKey") != null) {
       persistent.setValidationKey(xwiki.getXWiki().Param("xwiki.authentication.validationKey"));
   }
   if (xwiki.getXWiki().Param("xwiki.authentication.encryptionKey") != null) {
       persistent.setEncryptionKey(xwiki.getXWiki().Param("xwiki.authentication.encryptionKey"));
   }
   persistent.rememberLogin(request.request, response.response, username, password);
}

if(request.xpage == 'plain') {
println "=== Cookie ==="
def cookie = request.getCookie("username")
if (cookie!=null) {
   println "Cookie username is present: ${cookie.value}"
}
println """
=== User ===

${xcontext.user}
"""
}
{{/groovy}}

{{velocity}}
#if(!$isGuest)
  #if("$!request.asset" != "")
    #set($tempAssetName = $request.asset)
    #set($tempAsset = $xwiki.curriki.fetchAssetOrNull($tempAssetName))
    #if($tempAsset)
{{info}}Merci d'avoir contribué à la communauté Sankoré.{{/info}}

{{html}}
&lt;script type="text/javascript"&gt;
Ext.onReady(function(){
  Curriki.data.EventManager.on('Curriki.data:ready', function(){
    Ext.util.Cookies.set("assetStatus", "METADATA")
    Curriki.module.addpath.startPath('Copy', {copyOf:'$tempAssetName'});
  });
})
&lt;/script&gt;
{{/html}}
    #end
  #else
== Vos resources en attentes ==

#set($author = $context.user)
#if($request.author)
 #set($author = $request.author)
#end
#foreach($item in $xwiki.searchDocuments("where doc.space='AssetTemp' and doc.creator='${author}'"))
 #set($itemdoc = $xwiki.getDocument($item))
* [[$itemdoc.getDisplayTitle()&gt;&gt;?asset=${item}]]
#end

## {{warning}}Missing temporary asset name.{{/warning}}  
 #end
#else
  #set($xredirect = $doc.getExternalURL("view", "asset=$request.asset"))
  $response.sendRedirect($xwiki.getURL("XWiki.XWikiLogin", "login", "xredirect=${xredirect}"))
#end
{{/velocity}}</content>
</xwikidoc>
